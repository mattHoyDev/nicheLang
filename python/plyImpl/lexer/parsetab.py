
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSAND COMMA DECREMENT DIVEQ DIVIDE EQUALS EQUIV EXPON FLOAT GREATER GREQUALS INCREMENT INTEGER LBRACKET LCURLY LEQUALS LESS LPAREN MINUS MINUSEQ MODULO NAME NOTEQUALS NUMBER OR PERIOD PLUS PLUSEQ RBRACKET RCURLY RPAREN STRING TIMES TIMESEQstatement : NAME EQUALS expressionstatement : expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULO expression\n                  | expression EXPON expression\n                  | expression NOTEQUALS expression\n                  | expression EQUIV expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAMEempty :'
    
_lr_action_items = {'NAME':([0,4,5,7,8,9,10,11,12,13,14,15,],[2,17,17,17,17,17,17,17,17,17,17,17,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,],[4,-14,9,4,4,-13,4,4,4,4,4,4,4,4,4,-11,-14,9,9,-3,-4,-5,-6,9,9,9,9,-12,]),'LPAREN':([0,4,5,7,8,9,10,11,12,13,14,15,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'NUMBER':([0,4,5,7,8,9,10,11,12,13,14,15,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'$end':([1,2,3,6,16,17,19,20,21,22,23,24,25,26,27,28,],[0,-14,-2,-13,-11,-14,-1,-3,-4,-5,-6,-7,-8,-9,-10,-12,]),'EQUALS':([2,],[7,]),'PLUS':([2,3,6,16,17,18,19,20,21,22,23,24,25,26,27,28,],[-14,8,-13,-11,-14,8,8,-3,-4,-5,-6,8,8,8,8,-12,]),'TIMES':([2,3,6,16,17,18,19,20,21,22,23,24,25,26,27,28,],[-14,10,-13,-11,-14,10,10,10,10,-5,-6,10,10,10,10,-12,]),'DIVIDE':([2,3,6,16,17,18,19,20,21,22,23,24,25,26,27,28,],[-14,11,-13,-11,-14,11,11,11,11,-5,-6,11,11,11,11,-12,]),'MODULO':([2,3,6,16,17,18,19,20,21,22,23,24,25,26,27,28,],[-14,12,-13,-11,-14,12,12,-3,-4,-5,-6,12,12,12,12,-12,]),'EXPON':([2,3,6,16,17,18,19,20,21,22,23,24,25,26,27,28,],[-14,13,-13,-11,-14,13,13,-3,-4,-5,-6,13,13,13,13,-12,]),'NOTEQUALS':([2,3,6,16,17,18,19,20,21,22,23,24,25,26,27,28,],[-14,14,-13,-11,-14,14,14,-3,-4,-5,-6,14,14,14,14,-12,]),'EQUIV':([2,3,6,16,17,18,19,20,21,22,23,24,25,26,27,28,],[-14,15,-13,-11,-14,15,15,-3,-4,-5,-6,15,15,15,15,-12,]),'RPAREN':([6,16,17,18,20,21,22,23,24,25,26,27,28,],[-13,-11,-14,28,-3,-4,-5,-6,-7,-8,-9,-10,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,7,8,9,10,11,12,13,14,15,],[3,16,18,19,20,21,22,23,24,25,26,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','lexer.py',134),
  ('statement -> expression','statement',1,'p_statement_expr','lexer.py',140),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','lexer.py',145),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','lexer.py',146),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','lexer.py',147),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','lexer.py',148),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','lexer.py',149),
  ('expression -> expression EXPON expression','expression',3,'p_expression_binop','lexer.py',150),
  ('expression -> expression NOTEQUALS expression','expression',3,'p_expression_binop','lexer.py',151),
  ('expression -> expression EQUIV expression','expression',3,'p_expression_binop','lexer.py',152),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','lexer.py',164),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','lexer.py',169),
  ('expression -> NUMBER','expression',1,'p_expression_number','lexer.py',174),
  ('expression -> NAME','expression',1,'p_expression_name','lexer.py',180),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',193),
]
